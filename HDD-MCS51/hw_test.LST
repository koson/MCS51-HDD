C51 COMPILER V8.02   HW_TEST                                                               04/18/2006 22:47:03 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE HW_TEST
OBJECT MODULE PLACED IN hw_test.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE hw_test.c OMF2

line level    source

   1          #include <REG51AC2.h>
   2          #include <stdio.h>
   3          
   4          #define N 'N'
   5          #define E 'E'
   6          #define O 'O'
   7          #define n 'N'
   8          #define e 'E'
   9          #define o 'O'
  10          
  11          #define ATA_DEVICE_COUNT_MAX  2
  12          
  13          #define ATA_ST_ERR                      0x01
  14          #define ATA_ST_INDEX            0x02 >> 1 
  15          #define ATA_ST_CORR                     0x04 >> 2
  16          #define ATA_ST_DRQ                      0x08 >> 3
  17          #define ATA_ST_DSC                      0x10 >> 4
  18          #define ATA_ST_DWF                      0x20 >> 5
  19          #define ATA_ST_RDY                      0x40 >> 6
  20          #define ATA_ST_BUSY                     0x80 >> 7
  21          
  22          #define ATA_ERR_AMNF            0x01
  23          #define ATA_ERR_TK0NF           0x02 >> 1
  24          #define ATA_ERR_ABRT            0x04 >> 2
  25          #define ATA_ERR_MCR                     0x08 >> 3
  26          #define ATA_ERR_IDNF            0x10 >> 4
  27          #define ATA_ERR_MC                      0x20 >> 5
  28          #define ATA_ERR_UNC                     0x40 >> 6
  29          #define ATA_ERR_BBK                     0x80 >> 7
  30          
  31          #define DATA_PORT                       0xF0
  32          #define ERROR_REG                       0xF1
  33          #define SECTOR_COUNT            0xF2
  34          #define SECTOR_NUMBER           0xF3
  35          #define CYLINDER_LOW            0xF4
  36          #define CYLINDER_HI                     0xF5
  37          #define DRIVE_HEAD                      0xF6
  38          #define STATUS_REG                      0xF7
  39          #define COMMAND_REG                     0xF7
  40          
  41          #define regATA_DATALSB          0x60    // data reg         in/out
  42          #define regATA_DATAMSB          0x43    // data reg         in/out
  43          #define regATA_DATA                     0xF0    // data reg         in/out
  44          #define regATA_ERROR            0xF1    // error            in    
  45          #define regATA_FEATURE          0xF1    // feature reg         out
  46          #define regATA_SECCNT           0xF2    // sector count     in/out
  47          #define regATA_SECNR            0xF3    // sector number    in/out
  48          #define regATA_CYLLSB           0xF4    // cylinder low     in/out
  49          #define regATA_CYLMSB           0xF5    // cylinder high    in/out
  50          #define regATA_DEVHEAD          0xF6    // device head      in/out
  51          #define regATA_PRISTAT          0xF7    // primary status   in    
  52          #define regATA_DEVCMD           0xF7    // command             out
  53          #define regATA_ALTSTAT          0xEE    // alternate status in    
  54          #define regATA_DEVCTRL          0xEE    // device control      out
  55          #define regATA_DEVADDR          0xEF    // device address   in     
C51 COMPILER V8.02   HW_TEST                                                               04/18/2006 22:47:03 PAGE 2   

  56          
  57          // ATA error register (regATA_ERROR) bitmasks (msk)
  58          
  59          #define mskATA_ER_ICRC          0x80    // ATA Ultra DMA bad CRC
  60          #define mskATA_ER_BBK           0x80    // ATA bad block
  61          #define mskATA_ER_UNC           0x40    // ATA uncorrected error
  62          #define mskATA_ER_MC            0x20    // ATA media change
  63          #define mskATA_ER_IDNF          0x10    // ATA id not found
  64          #define mskATA_ER_MCR           0x08    // ATA media change request
  65          #define mskATA_ER_ABRT          0x04    // ATA command aborted
  66          #define mskATA_ER_NTK0          0x02    // ATA track 0 not found
  67          #define mskATA_ER_NDAM          0x01    // ATA address mark not found
  68          
  69          //#define mskATAPI_ER_SNSKEY    0xf0   // ATAPI sense key (mask)
  70          //#define mskATAPI_ER_MCR       0x08   // ATAPI Media Change Request
  71          //#define mskATAPI_ER_ABRT      0x04   // ATAPI command abort
  72          //#define mskATAPI_ER_EOM       0x02   // ATAPI End of Media
  73          //#define mskATAPI_ER_ILI       0x01   // ATAPI Illegal Length Indication
  74          
  75          // ATAPI Interrupt Reason bits in the Sector Count reg (regATA_SECCNT)
  76          
  77          #define regATA_SECCNT_P_TAG     0xf8   // ATAPI tag (mask)
  78          #define regATA_SECCNT_P_REL     0x04   // ATAPI release
  79          #define regATA_SECCNT_P_IO      0x02   // ATAPI I/O
  80          #define regATA_SECCNT_P_CD      0x01   // ATAPI C/D
  81          
  82          // bits 7-4 of the device/head (regATA_DEVHEAD) reg
  83          
  84          #define regATA_DEVHEAD_DEV0     0xe0  // 0xa0  // select device 0
  85          #define regATA_DEVHEAD_DEV1     0xf0 //0xb0  // select device 1
  86          
  87          // status reg (regATA_PRISTAT and regATA_ALTSTAT) bits
  88          
  89          #define regATA_PRISTAT_BSY  0x80  // busy
  90          #define regATA_PRISTAT_RDY  0x40  // ready
  91          #define regATA_PRISTAT_DF   0x20  // device fault
  92          #define regATA_PRISTAT_WFT  0x20  // write fault (old name)
  93          #define regATA_PRISTAT_SKC  0x10  // seek complete
  94          #define regATA_PRISTAT_SERV 0x10  // service
  95          #define regATA_PRISTAT_DRQ  0x08  // data request
  96          #define regATA_PRISTAT_CORR 0x04  // corrected
  97          #define regATA_PRISTAT_IDX  0x02  // index
  98          #define regATA_PRISTAT_ERR  0x01  // error
  99          
 100          // digital output reg (regATA_DEVCTRL) bitmasks
 101          
 102          #define regATA_DEVCTRL_HD15   0x00      // 0x08  // bit should always be set to one
 103          #define regATA_DEVCTRL_SRST   0x04  // soft reset
 104          #define regATA_DEVCTRL_NIEN   0x02  // disable interrupts
 105          
 106          /**************************************************************/
 107          
 108          
 109          #define ATA_DEVCONFIG_NONE    0
 110          #define ATA_DEVCONFIG_UNKNOWN 1
 111          #define ATA_DEVCONFIG_ATA     2
 112          #define ATA_DEVCONFIG_ATAPI   3
 113          
 114          
 115          // Most mandatory and optional ATA commands (from ATA-3),
 116          
 117          #define cmdATA_CFA_ERASE_SECTORS            0xC0
C51 COMPILER V8.02   HW_TEST                                                               04/18/2006 22:47:03 PAGE 3   

 118          #define cmdATA_CFA_REQUEST_EXT_ERR_CODE     0x03
 119          #define cmdATA_CFA_TRANSLATE_SECTOR         0x87
 120          #define cmdATA_CFA_WRITE_MULTIPLE_WO_ERASE  0xCD
 121          #define cmdATA_CFA_WRITE_SECTORS_WO_ERASE   0x38
 122          #define cmdATA_CHECK_POWER_MODE1            0xE5
 123          #define cmdATA_CHECK_POWER_MODE2            0x98
 124          #define cmdATA_DEVICE_RESET                 0x08
 125          #define cmdATA_EXECUTE_DEVICE_DIAGNOSTIC    0x90
 126          #define cmdATA_FLUSH_CACHE                  0xE7
 127          #define cmdATA_FORMAT_TRACK                 0x50
 128          #define cmdATA_ATANTIFY_DEVICE              0xEC
 129          #define cmdATA_ATANTIFY_DEVICE_PACKET       0xA1
 130          #define cmdATA_ATANTIFY_PACKET_DEVICE       0xA1
 131          #define cmdATA_IDLE1                        0xE3
 132          unsigned int  DataSpeed;
 133          unsigned char DataBits;
 134          unsigned char Parity;
 135          unsigned char StopBits;
 136          unsigned char SerialSet;
 137          
 138          void Init_serial();
 139          unsigned int Bytes_write; // len data_ethernet
 140          unsigned char Aux_Data[16];           //' TCP AUX DATA = INTERGER < PACKET - 55 BYTE AND CHECKRAM
 141          
 142          sbit RESETn = P1^7;
 143          sbit RDn    = P1^6;
 144          sbit WRn    = P1^5;
 145          sbit CS1n   = P1^4;
 146          sbit CS0n   = P1^3;
 147          sbit A2     = P1^2;
 148          sbit A1     = P1^1;
 149          sbit A0     = P1^0;
 150          sbit tstbit = P4^0;
 151          
 152          void delay(unsigned int);
 153          
 154          
 155          main()
 156          {
 157   1              unsigned char testbyte;
 158   1              unsigned int delay_time = 0;
 159   1      
 160   1              
 161   1              AUXR = 0x0C;             //' T89C51AC2 CONFIG SELECT IRAM = 1024 BYTE.
 162   1              Init_serial(); //' SERIAL SETTING.
 163   1              EA = 1;                  //' ENABLE INTERRUPT.
 164   1          ES = 1;                  //' ENABLE SERIAL INTERRUPT.
 165   1              
 166   1              P1 = 0xf8;
 167   1              P2 = 0;
 168   1      
 169   1              Bytes_write = 0;
 170   1              printf("=======================\n\r");
 171   1              printf("8051-IDE system...\n\r");
 172   1              printf("Version 1.0 \n\r");
 173   1              printf("14 April 2006 @19:30\n\r");
 174   1              printf("ktkoson@kmitl.ac.th\n\r");
 175   1              printf("all right reserved.\n\r");
 176   1              printf("=======================\n\r");
 177   1              printf("\n\r");
 178   1      
 179   1          while(1){
C51 COMPILER V8.02   HW_TEST                                                               04/18/2006 22:47:03 PAGE 4   

 180   2                      if(Bytes_write)
 181   2                      {
 182   3                              Bytes_write = 0;
 183   3                              switch (Aux_Data[0])
 184   3                              {
 185   4                                      case '7': 
 186   4                                              testbyte = 0x80;
 187   4                                              printf("RESET\r\n");
 188   4                                              break;
 189   4                                      case '6': 
 190   4                                              testbyte = 0x40;
 191   4                                              printf("DIOR\r\n");
 192   4                                              break;
 193   4                                      case '5': 
 194   4                                              testbyte = 0x20;
 195   4                                              printf("DIOW\r\n");
 196   4                                              break;
 197   4                                      case '4': 
 198   4                                              testbyte = 0x10;
 199   4                                              printf("CS1\r\n");
 200   4                                              break;
 201   4                                      case '3': 
 202   4                                              testbyte = 0x08;
 203   4                                              printf("CS0\r\n");
 204   4                                              break;
 205   4                                      case '2': 
 206   4                                              testbyte = 0x04;
 207   4                                              printf("DA2\r\n");
 208   4                                              break;
 209   4                                      case '1': 
 210   4                                              testbyte = 0x02;
 211   4                                              printf("DA1\r\n");
 212   4                                              break;
 213   4                                      case '0': 
 214   4                                              testbyte = 0x01;
 215   4                                              printf("DA0\r\n");
 216   4                                              break;
 217   4                                      case 'u':
 218   4                                              printf("%d\r\n",delay_time++);
 219   4                                              break;
 220   4                                      case 'd': 
 221   4                                              printf("%d\r\n",delay_time--);
 222   4                                              break;
 223   4                              }
 224   3                      }
 225   2                      P1 =  testbyte;
 226   2                      delay(delay_time);
 227   2                      P1 =  0;
 228   2                      delay(delay_time);
 229   2      
 230   2              }
 231   1      }
 232          
 233          
 234          void delay(unsigned int dd)
 235          {
 236   1              while(dd--) ;
 237   1      }
 238          
 239          /*"(---------------------------------------------------------------------)"*/
 240          /*"(-           DEFINE INTERNAL DATA OF SERIAL COMMUNICATION            -)"*/
 241          /*"(---------------------------------------------------------------------)"*/
C51 COMPILER V8.02   HW_TEST                                                               04/18/2006 22:47:03 PAGE 5   

 242          /*"(---------------------------------------------------------------------)"*/
 243          /*"(-                      INITIAL FUNCTION SERIAL                      -)"*/
 244          /*"(---------------------------------------------------------------------)"*/
 245          void Init_serial() 
 246          {
 247   1         //' SET TH1 AND PCON AT FEQUENCY. = 18.432 MHz
 248   1         PCON |= 0x80; 
 249   1         TH1 = 246;
 250   1         SCON = 0x50; 
 251   1         TMOD = 0x20; 
 252   1         TR1= 1;     //' TIMER 1 RUN.
 253   1         TI   = 0;   //' SET TI SEND FIRST CHAR OF UART.
 254   1      }
 255          
 256          /*"(---------------------------------------------------------------------)"*/
 257          /*"(-                      APPLICATIONS SEND DATA                       -)"*/
 258          /*"(---------------------------------------------------------------------)"*/
 259          char putchar(unsigned char c) 
 260          {
 261   1              SBUF = c; 
 262   1              while(!TI);
 263   1              TI = 0;      //' CLEAR BIT FLAG TI_0
 264   1              return (c);  //' MOV DATA TO SERIAL 
 265   1      }
 266          
 267          /*"(---------------------------------------------------------------------)"*/
 268          /*"(-                    APPLICATIONS RECEIVE DATA                      -)"*/
 269          /*"(---------------------------------------------------------------------)"*/
 270          void RxdReceive () interrupt 4 
 271          {
 272   1              unsigned char c;
 273   1              if (RI == 1) 
 274   1              { 
 275   2                      c = SBUF;
 276   2                      Aux_Data[Bytes_write++] = c; //   
 277   2                      Aux_Data[Bytes_write+1] = '\0'; //   
 278   2                      RI = 0;
 279   2              }
 280   1              return;
 281   1      }
 282          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    417    ----
   CONSTANT SIZE    =    189    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
