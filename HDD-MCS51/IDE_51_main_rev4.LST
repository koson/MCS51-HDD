C51 COMPILER V8.02   IDE_51_MAIN_REV4                                                      05/04/2006 01:04:54 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE IDE_51_MAIN_REV4
OBJECT MODULE PLACED IN IDE_51_main_rev4.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE IDE_51_main_rev4.c LARGE OMF2

line level    source

   1          /* ==============================================
   2          
   3          Project : IDE-51
   4          Purpose : Interface IDE Harddisk with AT89C51AC2
   5          Date    : Revision 3 2006.04.27
   6          Author  : ktkoson@kmitl.ac.th
   7          
   8          =================================================*/
   9          
  10          #include <REG51AC2.h>
  11          #include <stdio.h>
  12          #include <stdlib.h>
  13          
  14          #define N 'N'
  15          #define E 'E'
  16          #define O 'O'
  17          #define n 'N'
  18          #define e 'E'
  19          #define o 'O'
  20          
  21          #define ATA_DEVICE_COUNT_MAX  2
  22          
  23          #define ATA_ST_ERR                      0x01
  24          #define ATA_ST_INDEX            0x02 >> 1 
  25          #define ATA_ST_CORR                     0x04 >> 2
  26          #define ATA_ST_DRQ                      0x08 >> 3
  27          #define ATA_ST_DSC                      0x10 >> 4
  28          #define ATA_ST_DWF                      0x20 >> 5
  29          #define ATA_ST_RDY                      0x40 >> 6
  30          #define ATA_ST_BUSY                     0x80 >> 7
  31          
  32          #define ATA_ERR_AMNF            0x01
  33          #define ATA_ERR_TK0NF           0x02 >> 1
  34          #define ATA_ERR_ABRT            0x04 >> 2
  35          #define ATA_ERR_MCR                     0x08 >> 3
  36          #define ATA_ERR_IDNF            0x10 >> 4
  37          #define ATA_ERR_MC                      0x20 >> 5
  38          #define ATA_ERR_UNC                     0x40 >> 6
  39          #define ATA_ERR_BBK                     0x80 >> 7
  40          
  41          
  42          #define DATA_REG                        0xF0
  43          #define ERROR_REG                       0xF1
  44          #define SECTOR_COUNT            0xF2
  45          #define SECTOR_NUMBER           0xF3
  46          #define CYLINDER_LOW            0xF4
  47          #define CYLINDER_HI                     0xF5
  48          #define DRIVE_HEAD                      0xF6
  49          #define PRISTATUS_REG           0xF7
  50          #define COMMAND_REG                     0xF7
  51          #define ALTSTATUS_REG           0xEE
  52          
  53          
  54          
  55          /*
C51 COMPILER V8.02   IDE_51_MAIN_REV4                                                      05/04/2006 01:04:54 PAGE 2   

  56          #define regATA_DATALSB          0x60    // data reg         in/out
  57          #define regATA_DATAMSB          0x43    // data reg         in/out
  58          #define regATA_DATA                     0xF0    // data reg         in/out
  59          #define regATA_ERROR            0xF1    // error            in    
  60          #define regATA_FEATURE          0xF1    // feature reg         out
  61          #define regATA_SECCNT           0xF2    // sector count     in/out
  62          #define regATA_SECNR            0xF3    // sector number    in/out
  63          #define regATA_CYLLSB           0xF4    // cylinder low     in/out
  64          #define regATA_CYLMSB           0xF5    // cylinder high    in/out
  65          #define regATA_DEVHEAD          0xF6    // device head      in/out
  66          #define regATA_PRISTAT          0xF7    // primary status   in    
  67          #define regATA_DEVCMD           0xF7    // command             out
  68          #define regATA_ALTSTAT          0xEE    // alternate status in    
  69          #define regATA_DEVCTRL          0xEE    // device control      out
  70          #define regATA_DEVADDR          0xEF    // device address   in     
  71          */
  72          // ATA error register (regATA_ERROR) bitmasks (msk)
  73          
  74          #define mskATA_ER_ICRC          0x80    // ATA Ultra DMA bad CRC
  75          #define mskATA_ER_BBK           0x80    // ATA bad block
  76          #define mskATA_ER_UNC           0x40    // ATA uncorrected error
  77          #define mskATA_ER_MC            0x20    // ATA media change
  78          #define mskATA_ER_IDNF          0x10    // ATA id not found
  79          #define mskATA_ER_MCR           0x08    // ATA media change request
  80          #define mskATA_ER_ABRT          0x04    // ATA command aborted
  81          #define mskATA_ER_NTK0          0x02    // ATA track 0 not found
  82          #define mskATA_ER_NDAM          0x01    // ATA address mark not found
  83          
  84          
  85          // ATAPI Interrupt Reason bits in the Sector Count reg (regATA_SECCNT)
  86          
  87          #define regATA_SECCNT_P_TAG     0xf8   // ATAPI tag (mask)
  88          #define regATA_SECCNT_P_REL     0x04   // ATAPI release
  89          #define regATA_SECCNT_P_IO      0x02   // ATAPI I/O
  90          #define regATA_SECCNT_P_CD      0x01   // ATAPI C/D
  91          
  92          // bits 7-4 of the device/head (regATA_DEVHEAD) reg
  93          
  94          #define regATA_DEVHEAD_DEV0      0x00 // 0xe0   // select device 0
  95          #define regATA_DEVHEAD_DEV1      0x10 //0xf0  // select device 1
  96          
  97          // status reg (regATA_PRISTAT and regATA_ALTSTAT) bits
  98          
  99          #define regATA_PRISTAT_BSY  0x80  // busy
 100          #define regATA_PRISTAT_RDY  0x40  // ready
 101          #define regATA_PRISTAT_DF   0x20  // device fault
 102          #define regATA_PRISTAT_WFT  0x20  // write fault (old name)
 103          #define regATA_PRISTAT_SKC  0x10  // seek complete
 104          #define regATA_PRISTAT_SERV 0x10  // service
 105          #define regATA_PRISTAT_DRQ  0x08  // data request
 106          #define regATA_PRISTAT_CORR 0x04  // corrected
 107          #define regATA_PRISTAT_IDX  0x02  // index
 108          #define regATA_PRISTAT_ERR  0x01  // error
 109          
 110          // digital output reg (regATA_DEVCTRL) bitmasks
 111          
 112          #define regATA_DEVCTRL_HD15   0x00      // 0x08  // bit should always be set to one
 113          #define regATA_DEVCTRL_SRST   0x04  // soft reset
 114          #define regATA_DEVCTRL_NIEN   0x02  // disable interrupts
 115          
 116          /**************************************************************/
 117          
C51 COMPILER V8.02   IDE_51_MAIN_REV4                                                      05/04/2006 01:04:54 PAGE 3   

 118          
 119          #define ATA_DEVCONFIG_NONE    0
 120          #define ATA_DEVCONFIG_UNKNOWN 1
 121          #define ATA_DEVCONFIG_ATA     2
 122          #define ATA_DEVCONFIG_ATAPI   3
 123          
 124          
 125          // Most mandatory and optional ATA commands (from ATA-3),
 126          
 127          #define cmdATA_CFA_ERASE_SECTORS            0xC0
 128          #define cmdATA_CFA_REQUEST_EXT_ERR_CODE     0x03
 129          #define cmdATA_CFA_TRANSLATE_SECTOR         0x87
 130          #define cmdATA_CFA_WRITE_MULTIPLE_WO_ERASE  0xCD
 131          #define cmdATA_CFA_WRITE_SECTORS_WO_ERASE   0x38
 132          #define cmdATA_CHECK_POWER_MODE1            0xE5
 133          #define cmdATA_CHECK_POWER_MODE2            0x98
 134          #define cmdATA_DEVICE_RESET                 0x08
 135          #define cmdATA_EXECUTE_DEVICE_DIAGNOSTIC    0x90
 136          #define cmdATA_FLUSH_CACHE                  0xE7
 137          #define cmdATA_FORMAT_TRACK                 0x50
 138          #define cmdATA_ATANTIFY_DEVICE              0xEC
 139          #define cmdATA_ATANTIFY_DEVICE_PACKET       0xA1
 140          #define cmdATA_ATANTIFY_PACKET_DEVICE       0xA1
 141          #define cmdATA_IDLE1                        0xE3
 142          #define cmdATA_IDLE2                        0x97
 143          #define cmdATA_IDLE_IMMEDIATE1              0xE1
 144          #define cmdATA_IDLE_IMMEDIATE2              0x95
 145          #define cmdATA_INITIALIZE_DRIVE_PARAMETERS  0x91
 146          #define cmdATA_INITIALIZE_DEVICE_PARAMETERS 0x91
 147          #define cmdATA_NOP                          0x00
 148          #define cmdATA_PACKET                       0xA0
 149          #define cmdATA_READ_BUFFER                  0xE4
 150          #define cmdATA_READ_DMA                     0xC8
 151          #define cmdATA_READ_DMA_QUEUED              0xC7
 152          #define cmdATA_READ_MULTIPLE                0xC4
 153          #define cmdATA_READ_SECTORS                 0x20
 154          #define cmdATA_READ_VERIFY_SECTORS          0x40
 155          #define cmdATA_RECALIBRATE                  0x10
 156          #define cmdATA_SEEK                         0x70
 157          #define cmdATA_SET_FEATURES                 0xEF
 158          #define cmdATA_SET_MULTIPLE_MODE            0xC6
 159          #define cmdATA_SLEEP1                       0xE6
 160          #define cmdATA_SLEEP2                       0x99
 161          #define cmdATA_STANDBY1                     0xE2
 162          #define cmdATA_STANDBY2                     0x96
 163          #define cmdATA_STANDBY_IMMEDIATE1           0xE0
 164          #define cmdATA_STANDBY_IMMEDIATE2           0x94
 165          #define cmdATA_WRITE_BUFFER                 0xE8
 166          #define cmdATA_WRITE_DMA                    0xCA
 167          #define cmdATA_WRITE_DMA_QUEUED             0xCC
 168          #define cmdATA_WRITE_MULTIPLE               0xC5
 169          #define cmdATA_WRITE_SECTORS                0x30
 170          #define cmdATA_WRITE_VERIFY                 0x3C
 171          
 172          
 173          
 174          unsigned int  DataSpeed;
 175          unsigned char DataBits;
 176          unsigned char Parity;
 177          unsigned char StopBits;
 178          unsigned char SerialSet;
 179          
C51 COMPILER V8.02   IDE_51_MAIN_REV4                                                      05/04/2006 01:04:54 PAGE 4   

 180          unsigned char g_AtaDevConfig[ATA_DEVICE_COUNT_MAX];
 181          
 182          
 183          void Init_serial();
 184          unsigned char Bytes_write; // len data_ethernet
 185          unsigned char Aux_Data[32];           //' TCP AUX DATA = INTERGER < PACKET - 55 BYTE AND CHECKRAM
 186          unsigned char sectordata[512];
 187          
 188          
 189          sbit RESETn = P1^7;
 190          sbit RDn    = P1^6;
 191          sbit WRn    = P1^5;
 192          sbit CS1n   = P1^4;
 193          sbit CS0n   = P1^3;
 194          sbit A2     = P1^2;
 195          sbit A1     = P1^1;
 196          sbit A0     = P1^0;
 197          sbit tstbit = P4^0;
 198          
 199          void delay(unsigned int);
 200          unsigned char READ_ATA_REG (unsigned char REG );
 201          unsigned char READ_ATA_REG_HI (unsigned char REG );
 202          void WRITE_ATA_REG(unsigned char breg, unsigned char value);
 203          void ReportDiskStatus();
 204          void ReadHDDBuffer(void);
 205          void rep_all_reg ();
 206          void ReportErrorStatus();
 207          void wait_ATA_ready();
 208          //int AtaQueryDevice(void);
 209          int AtaResetAdapter(void);
 210          unsigned char AtaReadRegister(unsigned char p_ucRegister);
 211          void AtaWriteRegister(unsigned char p_ucRegister, unsigned char p_ucData);
 212          char AtaSelectDevice(unsigned char p_ucDevice);
 213          unsigned char word_counter = 0;
 214          unsigned char  buffer[7]; 
 215          
 216          
 217          
 218          
 219          
 220          main()
 221          {
 222   1              unsigned int i = 0;
 223   1              long reg,dat;
 224   1              char *p;
 225   1              char s[] = "     ";
 226   1      
 227   1              AUXR = 0x0C;    //' T89C51AC2 CONFIG SELECT IRAM = 1024 BYTE.
 228   1              Init_serial();  //' SERIAL SETTING.
 229   1              //IT0 = 1;              //' Falling edge interrupt 0
 230   1              //EX0 = 1;              //' Enable INT0 interrupt
 231   1              EA = 1;         //' ENABLE INTERRUPT.
 232   1          ES = 1;         //' ENABLE SERIAL INTERRUPT.
 233   1      
 234   1              P1 = 0xf8;
 235   1              //P2 = 0;
 236   1      
 237   1              Bytes_write = 0;
 238   1              printf(":RZ00\n"); // send hw reset to PC
 239   1              printf("=======================\n\r");
 240   1              printf("8051-IDE system...\n\r");
 241   1              printf("Version 1.0 \n\r");
C51 COMPILER V8.02   IDE_51_MAIN_REV4                                                      05/04/2006 01:04:54 PAGE 5   

 242   1              printf("14 April 2006 @19:30\n\r");
 243   1              printf("ktkoson@kmitl.ac.th\n\r");
 244   1              printf("all right reserved.\n\r");
 245   1              printf("=======================\n\r");
 246   1              printf("\n\r");
 247   1      
 248   1      
 249   1              printf("Hard disk diag...\n\r");
 250   1              printf("\n\r");
 251   1      
 252   1              RESETn = 0;
 253   1              delay(100);
 254   1              RESETn = 1;
 255   1              delay(100);
 256   1      
 257   1      
 258   1                      
 259   1              wait_ATA_ready(); 
 260   1              //printf("Harddisk ready...\r\n");
 261   1      
 262   1              rep_all_reg ();
 263   1              
 264   1              //printf("AtaQueryDevice() = %d... \r\n ",  AtaQueryDevice());
 265   1      
 266   1       
 267   1         // AtaWriteRegister(regATA_DEVCMD, cmdATA_STANDBY_IMMEDIATE1 );
 268   1      
 269   1              //rep_all_reg ();        
 270   1              //AtaSelectDevice(0);
 271   1              /*
 272   1      
 273   1      
 274   1         printf("WRITE_ATA_REG(COMMAND_REG, 0xE1);...\r\n");
 275   1      
 276   1         WRITE_ATA_REG(COMMAND_REG, 0xE1);
 277   1         wait_ATA_ready();    
 278   1         
 279   1         rep_all_reg ();
 280   1      */
 281   1         //WRITE_ATA_REG(COMMAND_REG, 0xEC);
 282   1      
 283   1         wait_ATA_ready();    
 284   1         printf("hello\n");
 285   1      
 286   1          while(1){
 287   2                      if(Bytes_write)
 288   2                      {
 289   3                              //printf("Bytes_write %bd auxdata = [%s]\n\r", Bytes_write,Aux_Data);
 290   3                              if(Aux_Data[0] != ':')
 291   3                              {
 292   4                                      printf(":err\n");
 293   4                                      Bytes_write = 0;
 294   4                                      Aux_Data[0] = 0;
 295   4                                      Aux_Data[1] = 0;
 296   4                                      continue;
 297   4                              } 
 298   3                              if(Aux_Data[Bytes_write-1] == ':')
 299   3                              { 
 300   4                                      // printf("Start of code\n");
 301   4                                      continue;
 302   4                              }
 303   3                              if(Aux_Data[Bytes_write-1] == 0x0d) 
C51 COMPILER V8.02   IDE_51_MAIN_REV4                                                      05/04/2006 01:04:54 PAGE 6   

 304   3                              {
 305   4                                      printf("Received %s\n",Aux_Data);
 306   4                                      Bytes_write=0;
 307   4                                      switch(Aux_Data[1])
 308   4                                      {
 309   5                                              case  'w' :
 310   5                                              switch (Aux_Data[2])
 311   5                                              {
 312   6                                                      case 'b': 
 313   6                                                              printf("Write Buffer\n");
 314   6                                                              break;
 315   6                                                      case 'r':
 316   6                                                              printf("Write Register\n");
 317   6                                                          s[0] = Aux_Data[3];
 318   6                                                          s[1] = Aux_Data[4];
 319   6                                                              reg = strtol (s, &p, 16);
 320   6                                                          s[0] = Aux_Data[5];
 321   6                                                          s[1] = Aux_Data[6];
 322   6                                                              dat = strtol (s, &p, 16);
 323   6                                                              AtaWriteRegister(reg, dat);
 324   6                                                              break;   
 325   6                                                      case 's':
 326   6                                                              printf("Write Sector\n");
 327   6      
 328   6                                                              break;   
 329   6                                                      case 'c':
 330   6                                                          s[0] = Aux_Data[3];
 331   6                                                          s[1] = Aux_Data[4];
 332   6                                                              reg = strtol (s, &p, 16);           
 333   6                                                              AtaWriteRegister(COMMAND_REG, reg);
 334   6                                                              break;   
 335   6      
 336   6                                                      default:
 337   6                                                              printf("Command not implemented @w[2]\n");
 338   6                                                      break;
 339   6                                              }
 340   5                                              break;
 341   5      
 342   5                                              case 'r':
 343   5                                              switch(Aux_Data[2])
 344   5                                              {
 345   6                                                      case 'b': 
 346   6                                                              printf("Read Buffer\n");
 347   6                                                              ReadHDDBuffer();                                                        
 348   6                                                              break;                          
 349   6                                                      case 'r' :
 350   6                                                              rep_all_reg ();
 351   6                                                              break;                          
 352   6                                                      case 's' :
 353   6                                                              printf("Read Sector\n");
 354   6                                                              break;  
 355   6                                                      case 'e' :
 356   6                                                              printf(":RER%bX\n", AtaReadRegister(ERROR_REG));
 357   6                                                              break;  
 358   6                                                      case 't' :
 359   6                                                              printf(":RTR%bX\n", AtaReadRegister(PRISTATUS_REG));
 360   6                                                              break;  
 361   6                                                                                      
 362   6                                                      default:
 363   6                                                              printf("Command not implemented @r[2]\n");
 364   6                                                      break;
 365   6                                              } 
C51 COMPILER V8.02   IDE_51_MAIN_REV4                                                      05/04/2006 01:04:54 PAGE 7   

 366   5                                              break;
 367   5                                              default:
 368   5                                              printf("Command not implemented @[1]\n");
 369   5                                              break;
 370   5                                      }
 371   4                              }
 372   3                      }       
 373   2              }
 374   1      }
 375          
 376          
 377          void ReadHDDBuffer(void)
 378          {
 379   1              int s,t;
 380   1              unsigned char a,b;
 381   1              while( (READ_ATA_REG(ALTSTATUS_REG) & 0x80)) ;
 382   1              READ_ATA_REG(PRISTATUS_REG);
 383   1              for(s=0;s <= 256; s++ )
 384   1              {
 385   2                      while(!(READ_ATA_REG(PRISTATUS_REG)&& 0x80)) ;
 386   2                      P0 = 0xff;
 387   2                      P1 = DATA_REG;
 388   2                      RDn = 0;
 389   2                      sectordata[s*2] = P0;
 390   2                      sectordata[(s*2)+1] = P2;
 391   2                      RDn = 1;                
 392   2              }       
 393   1      
 394   1              printf("ADDR ");
 395   1              for(t=0;t <= 15; t++ )
 396   1              {
 397   2                      printf("%02bX ",(unsigned char ) t);
 398   2                              
 399   2              }               
 400   1              printf("\n");
 401   1      
 402   1                        
 403   1              for(s=0;s <= 31; s++ )
 404   1              {
 405   2                      printf("%04X ",s*16);
 406   2                      for(t=0; t < 8; t++ )
 407   2                      {
 408   3                              printf("%02bX %02bX ", sectordata[(8*s+t)*2+1],sectordata[(8*s+t)*2]);
 409   3                      }               
 410   2                      printf("\t");
 411   2                      for(t=0;t < 8; t++ )
 412   2                      {
 413   3                          a = sectordata[(8*s+t)*2+1] ;                   
 414   3                              if((a > 'z') || (a < '0')) a = '.';
 415   3                              b = sectordata[(8*s+t)*2];
 416   3                          if((b > 'z') || (b < '0')) b = '.';
 417   3                              printf("%c%c", a, b);
 418   3                      }               
 419   2                      printf("\n");
 420   2                      delay(10);
 421   2              }
 422   1      
 423   1      
 424   1                              
 425   1      
 426   1      }
 427          
C51 COMPILER V8.02   IDE_51_MAIN_REV4                                                      05/04/2006 01:04:54 PAGE 8   

 428          
 429          void int0_isr (void) interrupt 0
 430          {
 431   1      //      sectordata[word_counter++] = AtaReadRegister( DATA_REG );
 432   1      //      sectordata[word_counter++] = P2;
 433   1      }
 434          
 435          /*===================================================================
 436             ATA support function
 437          =====================================================================*/
 438          unsigned char AtaReadRegister(unsigned char p_ucRegister)
 439          {
 440   1              unsigned char ata_reg;
 441   1              ata_reg = READ_ATA_REG((unsigned char)p_ucRegister);
 442   1              return ata_reg; 
 443   1      }
 444          
 445          void AtaWriteRegister(unsigned char p_ucRegister, unsigned char p_ucData)
 446          {
 447   1              //WRITE_ATA_REG((unsigned char)p_ucRegister, p_ucData);
 448   1      
 449   1              while( (READ_ATA_REG(PRISTATUS_REG) & 0x80)) ;
 450   1              P0 = p_ucData ;
 451   1              P1 = p_ucRegister;
 452   1              WRn = 0;
 453   1              delay(50);
 454   1              WRn = 1;
 455   1      
 456   1      }
 457          void wait_ATA_ready()
 458          {
 459   1              while( (READ_ATA_REG(PRISTATUS_REG) & 0x80)) ;    // wait for not busy
 460   1              while(!(READ_ATA_REG(PRISTATUS_REG) & 0x40));     // wait for ready
 461   1      }
 462          
 463          void rep_all_reg ()
 464          {
 465   1              printf("\n");
 466   1              printf(":RSC%02bX\n", READ_ATA_REG(SECTOR_COUNT));
 467   1              printf(":RSN%02bX\n", READ_ATA_REG(SECTOR_NUMBER));
 468   1              printf(":RCL%02bX\n", READ_ATA_REG(CYLINDER_LOW));
 469   1              printf(":RCH%02bX\n", READ_ATA_REG(CYLINDER_HI));
 470   1              printf(":RSD%02bX\n", READ_ATA_REG(DRIVE_HEAD));
 471   1              printf(":RTR%02bX\n", READ_ATA_REG(PRISTATUS_REG));
 472   1              printf(":RER%02bX\n", READ_ATA_REG(ERROR_REG));
 473   1      }
 474          
 475          unsigned char READ_ATA_REG (unsigned char REG )
 476          {
 477   1              unsigned char return_val;
 478   1              P1 = REG;
 479   1              RDn = 0;
 480   1              return_val = P0;
 481   1              RDn = 1;
 482   1              return return_val;
 483   1      }                  
 484          /*
 485          void WRITE_ATA_REG(unsigned char breg, unsigned char value)
 486          {
 487                  while( (READ_ATA_REG(STATUS_REG) & 0x80)) ;
 488                  P0 = value;
 489                  delay(50);
C51 COMPILER V8.02   IDE_51_MAIN_REV4                                                      05/04/2006 01:04:54 PAGE 9   

 490                  P1 = breg;
 491                  delay(50);
 492                  WRn = 0;
 493                  delay(50);
 494                  WRn = 1;
 495          }
 496          */
 497          /*=======================================
 498              utility function
 499          
 500          =========================================*/
 501          
 502          /*
 503          function        : void delay(unsigned int dd)
 504          return          : none
 505          parameter       : int dd - delay counter (1 to 65535)
 506          */
 507          void delay(unsigned int dd)
 508          {
 509   1              while(dd--) ;
 510   1      }
 511          
 512          
 513          /*=======================================
 514           Serial port support function
 515          =========================================*/
 516          void Init_serial() 
 517          {
 518   1         //' SET TH1 AND PCON AT FEQUENCY. = 18.432 MHz
 519   1         PCON |= 0x80; 
 520   1         TH1 = 246;
 521   1         SCON = 0x50; 
 522   1         TMOD = 0x20; 
 523   1         TR1= 1;     //' TIMER 1 RUN.
 524   1         TI   = 0;   //' SET TI SEND FIRST CHAR OF UART.
 525   1      }
 526          
 527          /*"(---------------------------------------------------------------------)"*/
 528          /*"(-                      APPLICATIONS SEND DATA                       -)"*/
 529          /*"(---------------------------------------------------------------------)"*/
 530          char putchar(unsigned char c) 
 531          {
 532   1              SBUF = c; 
 533   1              while(!TI);
 534   1              TI = 0;      //' CLEAR BIT FLAG TI_0
 535   1              return (c);  //' MOV DATA TO SERIAL 
 536   1      }
 537          
 538          /*"(---------------------------------------------------------------------)"*/
 539          /*"(-                    APPLICATIONS RECEIVE DATA                      -)"*/
 540          /*"(---------------------------------------------------------------------)"*/
 541          void RxdReceive () interrupt 4 
 542          {
 543   1              unsigned char c;
 544   1              if (RI == 1) 
 545   1              { 
 546   2                      c = SBUF;
 547   2                      Aux_Data[Bytes_write++] = c; //   
 548   2                      Aux_Data[Bytes_write+1] = '\0'; //   
 549   2                      RI = 0;
 550   2              }
 551   1              return;
C51 COMPILER V8.02   IDE_51_MAIN_REV4                                                      05/04/2006 01:04:54 PAGE 10  

 552   1      }
 553          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1520    ----
   CONSTANT SIZE    =    489    ----
   XDATA SIZE       =    561      27
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
