C51 COMPILER V8.02   IDE_51_MAIN_REV5                                                      05/08/2006 05:26:46 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE IDE_51_MAIN_REV5
OBJECT MODULE PLACED IN IDE_51_main_rev5.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE IDE_51_main_rev5.c LARGE OMF2

line level    source

   1          /* ==============================================
   2          
   3          Project : IDE-51
   4          Purpose : Interface IDE Harddisk with AT89C51AC2
   5          Date    : Revision 3 2006.04.27
   6                          : Revision 5 2006.05.04 
   7          Author  : ktkoson@kmitl.ac.th
   8          
   9          =================================================*/
  10          
  11          #include <REG51AC2.h>
  12          #include <stdio.h>
  13          #include <stdlib.h>
  14          
  15          #define N 'N'
  16          #define E 'E'
  17          #define O 'O'
  18          #define n 'N'
  19          #define e 'E'
  20          #define o 'O'
  21          
  22          #define ATA_DEVICE_COUNT_MAX  2
  23          
  24          #define ATA_ST_ERR                      0x01
  25          #define ATA_ST_INDEX            0x02 >> 1 
  26          #define ATA_ST_CORR                     0x04 >> 2
  27          #define ATA_ST_DRQ                      0x08 >> 3
  28          #define ATA_ST_DSC                      0x10 >> 4
  29          #define ATA_ST_DWF                      0x20 >> 5
  30          #define ATA_ST_RDY                      0x40 >> 6
  31          #define ATA_ST_BUSY                     0x80 >> 7
  32          
  33          #define ATA_SR_BSY              0x80
  34          #define ATA_SR_DRDY             0x40
  35          #define ATA_SR_DF               0x20
  36          #define ATA_SR_DSC              0x10
  37          #define ATA_SR_DRQ              0x08
  38          #define ATA_SR_CORR             0x04
  39          #define ATA_SR_IDX              0x02
  40          #define ATA_SR_ERR              0x01
  41          
  42          
  43          #define ATA_ERR_AMNF            0x01
  44          #define ATA_ERR_TK0NF           0x02 >> 1
  45          #define ATA_ERR_ABRT            0x04 >> 2
  46          #define ATA_ERR_MCR                     0x08 >> 3
  47          #define ATA_ERR_IDNF            0x10 >> 4
  48          #define ATA_ERR_MC                      0x20 >> 5
  49          #define ATA_ERR_UNC                     0x40 >> 6
  50          #define ATA_ERR_BBK                     0x80 >> 7
  51          
  52          
  53          #define DATA_REG                        0xF0
  54          #define ERROR_REG                       0xF1
  55          #define SECTOR_COUNT            0xF2
C51 COMPILER V8.02   IDE_51_MAIN_REV5                                                      05/08/2006 05:26:46 PAGE 2   

  56          #define SECTOR_NUMBER           0xF3
  57          #define CYLINDER_LOW            0xF4
  58          #define CYLINDER_HI                     0xF5
  59          #define DRIVE_HEAD                      0xF6
  60          #define PRISTATUS_REG           0xF7
  61          #define COMMAND_REG                     0xF7
  62          #define ALTSTATUS_REG           0xEE
  63          
  64          
  65          
  66          /*
  67          #define regATA_DATALSB          0x60    // data reg         in/out
  68          #define regATA_DATAMSB          0x43    // data reg         in/out
  69          #define regATA_DATA                     0xF0    // data reg         in/out
  70          #define regATA_ERROR            0xF1    // error            in    
  71          #define regATA_FEATURE          0xF1    // feature reg         out
  72          #define regATA_SECCNT           0xF2    // sector count     in/out
  73          #define regATA_SECNR            0xF3    // sector number    in/out
  74          #define regATA_CYLLSB           0xF4    // cylinder low     in/out
  75          #define regATA_CYLMSB           0xF5    // cylinder high    in/out
  76          #define regATA_DEVHEAD          0xF6    // device head      in/out
  77          #define regATA_PRISTAT          0xF7    // primary status   in    
  78          #define regATA_DEVCMD           0xF7    // command             out
  79          #define regATA_ALTSTAT          0xEE    // alternate status in    
  80          #define regATA_DEVCTRL          0xEE    // device control      out
  81          #define regATA_DEVADDR          0xEF    // device address   in     
  82          */
  83          // ATA error register (regATA_ERROR) bitmasks (msk)
  84          
  85          #define mskATA_ER_ICRC          0x80    // ATA Ultra DMA bad CRC
  86          #define mskATA_ER_BBK           0x80    // ATA bad block
  87          #define mskATA_ER_UNC           0x40    // ATA uncorrected error
  88          #define mskATA_ER_MC            0x20    // ATA media change
  89          #define mskATA_ER_IDNF          0x10    // ATA id not found
  90          #define mskATA_ER_MCR           0x08    // ATA media change request
  91          #define mskATA_ER_ABRT          0x04    // ATA command aborted
  92          #define mskATA_ER_NTK0          0x02    // ATA track 0 not found
  93          #define mskATA_ER_NDAM          0x01    // ATA address mark not found
  94          
  95          
  96          // ATAPI Interrupt Reason bits in the Sector Count reg (regATA_SECCNT)
  97          
  98          #define regATA_SECCNT_P_TAG     0xf8   // ATAPI tag (mask)
  99          #define regATA_SECCNT_P_REL     0x04   // ATAPI release
 100          #define regATA_SECCNT_P_IO      0x02   // ATAPI I/O
 101          #define regATA_SECCNT_P_CD      0x01   // ATAPI C/D
 102          
 103          // bits 7-4 of the device/head (regATA_DEVHEAD) reg
 104          
 105          #define regATA_DEVHEAD_DEV0      0x00 // 0xe0   // select device 0
 106          #define regATA_DEVHEAD_DEV1      0x10 //0xf0  // select device 1
 107          
 108          // status reg (regATA_PRISTAT and regATA_ALTSTAT) bits
 109          
 110          #define regATA_PRISTAT_BSY  0x80  // busy
 111          #define regATA_PRISTAT_RDY  0x40  // ready
 112          #define regATA_PRISTAT_DF   0x20  // device fault
 113          #define regATA_PRISTAT_WFT  0x20  // write fault (old name)
 114          #define regATA_PRISTAT_SKC  0x10  // seek complete
 115          #define regATA_PRISTAT_SERV 0x10  // service
 116          #define regATA_PRISTAT_DRQ  0x08  // data request
 117          #define regATA_PRISTAT_CORR 0x04  // corrected
C51 COMPILER V8.02   IDE_51_MAIN_REV5                                                      05/08/2006 05:26:46 PAGE 3   

 118          #define regATA_PRISTAT_IDX  0x02  // index
 119          #define regATA_PRISTAT_ERR  0x01  // error
 120          
 121          // digital output reg (regATA_DEVCTRL) bitmasks
 122          
 123          #define regATA_DEVCTRL_HD15   0x00      // 0x08  // bit should always be set to one
 124          #define regATA_DEVCTRL_SRST   0x04  // soft reset
 125          #define regATA_DEVCTRL_NIEN   0x02  // disable interrupts
 126          
 127          /**************************************************************/
 128          
 129          
 130          #define ATA_DEVCONFIG_NONE    0
 131          #define ATA_DEVCONFIG_UNKNOWN 1
 132          #define ATA_DEVCONFIG_ATA     2
 133          #define ATA_DEVCONFIG_ATAPI   3
 134          
 135          
 136          // Most mandatory and optional ATA commands (from ATA-3),
 137          
 138          #define cmdATA_CFA_ERASE_SECTORS            0xC0
 139          #define cmdATA_CFA_REQUEST_EXT_ERR_CODE     0x03
 140          #define cmdATA_CFA_TRANSLATE_SECTOR         0x87
 141          #define cmdATA_CFA_WRITE_MULTIPLE_WO_ERASE  0xCD
 142          #define cmdATA_CFA_WRITE_SECTORS_WO_ERASE   0x38
 143          #define cmdATA_CHECK_POWER_MODE1            0xE5
 144          #define cmdATA_CHECK_POWER_MODE2            0x98
 145          #define cmdATA_DEVICE_RESET                 0x08
 146          #define cmdATA_EXECUTE_DEVICE_DIAGNOSTIC    0x90
 147          #define cmdATA_FLUSH_CACHE                  0xE7
 148          #define cmdATA_FORMAT_TRACK                 0x50
 149          #define cmdATA_ATANTIFY_DEVICE              0xEC
 150          #define cmdATA_ATANTIFY_DEVICE_PACKET       0xA1
 151          #define cmdATA_ATANTIFY_PACKET_DEVICE       0xA1
 152          #define cmdATA_IDLE1                        0xE3
 153          #define cmdATA_IDLE2                        0x97
 154          #define cmdATA_IDLE_IMMEDIATE1              0xE1
 155          #define cmdATA_IDLE_IMMEDIATE2              0x95
 156          #define cmdATA_INITIALIZE_DRIVE_PARAMETERS  0x91
 157          #define cmdATA_INITIALIZE_DEVICE_PARAMETERS 0x91
 158          #define cmdATA_NOP                          0x00
 159          #define cmdATA_PACKET                       0xA0
 160          #define cmdATA_READ_BUFFER                  0xE4
 161          #define cmdATA_READ_DMA                     0xC8
 162          #define cmdATA_READ_DMA_QUEUED              0xC7
 163          #define cmdATA_READ_MULTIPLE                0xC4
 164          #define cmdATA_READ_SECTORS                 0x20
 165          #define cmdATA_READ_VERIFY_SECTORS          0x40
 166          #define cmdATA_RECALIBRATE                  0x10
 167          #define cmdATA_SEEK                         0x70
 168          #define cmdATA_SET_FEATURES                 0xEF
 169          #define cmdATA_SET_MULTIPLE_MODE            0xC6
 170          #define cmdATA_SLEEP1                       0xE6
 171          #define cmdATA_SLEEP2                       0x99
 172          #define cmdATA_STANDBY1                     0xE2
 173          #define cmdATA_STANDBY2                     0x96
 174          #define cmdATA_STANDBY_IMMEDIATE1           0xE0
 175          #define cmdATA_STANDBY_IMMEDIATE2           0x94
 176          #define cmdATA_WRITE_BUFFER                 0xE8
 177          #define cmdATA_WRITE_DMA                    0xCA
 178          #define cmdATA_WRITE_DMA_QUEUED             0xCC
 179          #define cmdATA_WRITE_MULTIPLE               0xC5
C51 COMPILER V8.02   IDE_51_MAIN_REV5                                                      05/08/2006 05:26:46 PAGE 4   

 180          #define cmdATA_WRITE_SECTORS                0x30
 181          #define cmdATA_WRITE_VERIFY                 0x3C
 182          
 183          #define ATA_IDENT_DEVICETYPE    0               // specifies ATA/ATAPI, removable/non-removable
 184          #define ATA_IDENT_CYLINDERS             1               // number of logical cylinders
 185          #define ATA_IDENT_HEADS                 3               // number of logical heads
 186          #define ATA_IDENT_SECTORS               6               // number of sectors per track
 187          #define ATA_IDENT_SERIAL                10              // drive model name (20 characters)
 188          #define ATA_IDENT_MODEL                 27              // drive model name (40 characters)
 189          #define ATA_IDENT_FIELDVALID    53              // indicates field validity of higher words (bit0: words54-58, bit1: word
             -s 64-70)
 190          #define ATA_IDENT_LBASECTORS    60              // number of sectors in LBA translation mode
 191          
 192          
 193          unsigned int  DataSpeed;
 194          unsigned char DataBits;
 195          unsigned char Parity;
 196          unsigned char StopBits;
 197          unsigned char SerialSet;
 198          
 199          unsigned char g_AtaDevConfig[ATA_DEVICE_COUNT_MAX];
 200          void ataDriveInit(void);
 201          
 202          void Init_serial();
 203          unsigned char Bytes_write; // len data_ethernet
 204          unsigned char Aux_Data[32];           //' TCP AUX DATA = INTERGER < PACKET - 55 BYTE AND CHECKRAM
 205          unsigned char sectordata[512];
 206          
 207          
 208          sbit RESETn = P1^7;
 209          sbit RDn    = P1^6;
 210          sbit WRn    = P1^5;
 211          sbit CS1n   = P1^4;
 212          sbit CS0n   = P1^3;
 213          sbit A2     = P1^2;
 214          sbit A1     = P1^1;
 215          sbit A0     = P1^0;
 216          sbit tstbit = P4^0;
 217          
 218          void delay(unsigned int);
 219          unsigned char READ_ATA_REG (unsigned char REG );
 220          unsigned char READ_ATA_REG_HI (unsigned char REG );
 221          void WRITE_ATA_REG(unsigned char breg, unsigned char value);
 222          void ReportDiskStatus();
 223          void ReadHDDBuffer(void);
 224          void rep_all_reg ();
 225          void ReportErrorStatus();
 226          void wait_ATA_ready();
 227          void reportbuffers(void);
 228          //int AtaQueryDevice(void);
 229          int AtaResetAdapter(void);
 230          unsigned char AtaReadRegister(unsigned char p_ucRegister);
 231          void AtaWriteRegister(unsigned char p_ucRegister, unsigned char p_ucData);
 232          char AtaSelectDevice(unsigned char p_ucDevice);
 233          unsigned char word_counter = 0;
 234          unsigned char  buffer[7]; 
 235          void ataWriteByte(unsigned char  reg, unsigned char  dat);
 236          
 237          
 238          typedef struct 
 239          {
 240                  unsigned int  cylinders;
C51 COMPILER V8.02   IDE_51_MAIN_REV5                                                      05/08/2006 05:26:46 PAGE 5   

 241                  unsigned char heads;
 242                  unsigned char sectors;
 243                  unsigned long sizeinsectors;
 244                  unsigned char LBAsupport;
 245                  char model[41];
 246          } typeDriveInfo;
 247          
 248          
 249           typeDriveInfo ataDriveInfo;
 250          
 251          
 252          main()
 253          {
 254   1              unsigned int i = 0;
 255   1              long reg,dat;
 256   1              char *p;
 257   1              char s[] = "     ";
 258   1      
 259   1              AUXR = 0x0C;    //' T89C51AC2 CONFIG SELECT IRAM = 1024 BYTE.
 260   1              Init_serial();  //' SERIAL SETTING.
 261   1              //IT0 = 1;              //' Falling edge interrupt 0
 262   1              //EX0 = 1;              //' Enable INT0 interrupt
 263   1              EA = 1;         //' ENABLE INTERRUPT.
 264   1          ES = 1;         //' ENABLE SERIAL INTERRUPT.
 265   1      
 266   1              P1 = 0xf8;
 267   1              //P2 = 0;
 268   1      
 269   1              Bytes_write = 0;
 270   1              printf(":RZ00\n"); // send hw reset to PC
 271   1              printf("=======================\n\r");
 272   1              printf("8051-IDE system...\n\r");
 273   1              printf("Version 1.0 \n\r");
 274   1              printf("14 April 2006 @19:30\n\r");
 275   1              printf("ktkoson@kmitl.ac.th\n\r");
 276   1              printf("all right reserved.\n\r");
 277   1              printf("=======================\n\r");
 278   1              printf("\n\r");
 279   1      
 280   1      
 281   1              printf("Hard disk diag...\n\r");
 282   1              printf("\n\r");
 283   1      
 284   1              RESETn = 0;
 285   1              delay(100);
 286   1              RESETn = 1;
 287   1              delay(100);
 288   1              wait_ATA_ready();
 289   1               
 290   1              ataDriveInit();
 291   1              rep_all_reg ();
 292   1              
 293   1              /*
 294   1      
 295   1      
 296   1         printf("WRITE_ATA_REG(COMMAND_REG, 0xE1);...\r\n");
 297   1      
 298   1         WRITE_ATA_REG(COMMAND_REG, 0xE1);
 299   1         wait_ATA_ready();    
 300   1         
 301   1         rep_all_reg ();
 302   1      */
C51 COMPILER V8.02   IDE_51_MAIN_REV5                                                      05/08/2006 05:26:46 PAGE 6   

 303   1         //WRITE_ATA_REG(COMMAND_REG, 0xEC);
 304   1      
 305   1         wait_ATA_ready();    
 306   1         printf("hello\n");
 307   1      
 308   1          while(1){
 309   2                      if(Bytes_write)
 310   2                      {
 311   3                              //printf("Bytes_write %bd auxdata = [%s]\n\r", Bytes_write,Aux_Data);
 312   3                              if(Aux_Data[0] != ':')
 313   3                              {
 314   4                                      printf(":err\n");
 315   4                                      Bytes_write = 0;
 316   4                                      Aux_Data[0] = 0;
 317   4                                      Aux_Data[1] = 0;
 318   4                                      continue;
 319   4                              } 
 320   3                              if(Aux_Data[Bytes_write-1] == ':')
 321   3                              { 
 322   4                                      // printf("Start of code\n");
 323   4                                      continue;
 324   4                              }
 325   3                              if(Aux_Data[Bytes_write-1] == 0x0d) 
 326   3                              {
 327   4                                      printf("Received %s\n",Aux_Data);
 328   4                                      Bytes_write=0;
 329   4                                      switch(Aux_Data[1])
 330   4                                      {
 331   5                                              case  'w' :
 332   5                                              switch (Aux_Data[2])
 333   5                                              {
 334   6                                                      case 'b': 
 335   6                                                              printf("Write Buffer\n");
 336   6                                                              break;
 337   6                                                      case 'r':
 338   6                                                              printf("Write Register\n");
 339   6                                                          s[0] = Aux_Data[3];
 340   6                                                          s[1] = Aux_Data[4];
 341   6                                                              reg = strtol (s, &p, 16);
 342   6                                                          s[0] = Aux_Data[5];
 343   6                                                          s[1] = Aux_Data[6];
 344   6                                                              dat = strtol (s, &p, 16);
 345   6                                                              AtaWriteRegister(reg, dat);
 346   6                                                              break;   
 347   6                                                      case 's':
 348   6                                                              printf("Write Sector\n");
 349   6      
 350   6                                                              break;   
 351   6                                                      case 'c':
 352   6                                                          s[0] = Aux_Data[3];
 353   6                                                          s[1] = Aux_Data[4];
 354   6                                                              reg = strtol (s, &p, 16);           
 355   6                                                              AtaWriteRegister(COMMAND_REG, reg);
 356   6                                                              break;   
 357   6      
 358   6                                                      default:
 359   6                                                              printf("Command not implemented @w[2]\n");
 360   6                                                      break;
 361   6                                              }
 362   5                                              break;
 363   5      
 364   5                                              case 'r':
C51 COMPILER V8.02   IDE_51_MAIN_REV5                                                      05/08/2006 05:26:46 PAGE 7   

 365   5                                              switch(Aux_Data[2])
 366   5                                              {
 367   6                                                      case 'b': 
 368   6                                                              printf("Read Buffer\n");
 369   6                                                              ReadHDDBuffer();                                                        
 370   6                                                              break;                          
 371   6                                                      case 'r' :
 372   6                                                              rep_all_reg ();
 373   6                                                              break;                          
 374   6                                                      case 's' :
 375   6                                                              printf("Read Sector\n");
 376   6                                                              break;  
 377   6                                                      case 'e' :
 378   6                                                              printf(":RER%bX\n", AtaReadRegister(ERROR_REG));
 379   6                                                              break;  
 380   6                                                      case 't' :
 381   6                                                              printf(":RTR%bX\n", AtaReadRegister(PRISTATUS_REG));
 382   6                                                              break;  
 383   6                                                                                      
 384   6                                                      default:
 385   6                                                              printf("Command not implemented @r[2]\n");
 386   6                                                      break;
 387   6                                              } 
 388   5                                              break;
 389   5                                              default:
 390   5                                              printf("Command not implemented @[1]\n");
 391   5                                              break;
 392   5                                      }
 393   4                              }
 394   3                      }       
 395   2              }
 396   1      }
 397          
 398          
 399          unsigned char  ataReadByte(unsigned char  reg)
 400          {
 401   1              return AtaReadRegister(reg);
 402   1      }
 403          
 404          void ataWriteByte(unsigned char  reg, unsigned char  dat)
 405          {
 406   1               AtaWriteRegister(reg,dat);
 407   1      }
 408          
 409          
 410          unsigned char  ataStatusWait(unsigned char  mask, unsigned char waitStatus)
 411          {
 412   1              register unsigned char  status;
 413   1      
 414   1              delay(100);
 415   1      
 416   1              // wait for desired status
 417   1              while( ((status = ataReadByte(COMMAND_REG)) & mask) == waitStatus );
 418   1      
 419   1              return status;
 420   1      }
 421          
 422          void rprintfStr(char str[])
 423          {
 424   1              // send a string stored in RAM
 425   1              // check to make sure we have a good pointer
 426   1              if (!str) return;
C51 COMPILER V8.02   IDE_51_MAIN_REV5                                                      05/08/2006 05:26:46 PAGE 8   

 427   1      
 428   1              // print the string until a null-terminator
 429   1              while (*str)
 430   1                      putchar(*str++);
 431   1      }
 432          
 433          
 434          
 435          void ataDriveInit(void)
 436          {
 437   1              unsigned char  i;
 438   1              unsigned char* buffer = &sectordata; //(0x1E00)
 439   1      
 440   1              // read drive identity
 441   1              printf("\r\nScanning IDE interface...\r\n");
 442   1              // Wait for drive to be ready
 443   1              ataStatusWait(ATA_SR_BSY, ATA_SR_BSY);
 444   1              // issue identify command
 445   1              ataWriteByte(COMMAND_REG, 0xEC);
 446   1              // wait for drive to request data transfer
 447   1              ataStatusWait(ATA_SR_DRQ, ATA_SR_DRQ);
 448   1              delay(200);
 449   1              // read in the data
 450   1              ReadHDDBuffer();
 451   1              //ataReadDataBuffer(buffer, 512);
 452   1      
 453   1              // set local drive info parameters
 454   1              ataDriveInfo.cylinders =        (unsigned int)(sectordata[ATA_IDENT_CYLINDERS*2+1]*256 + sectordata[ATA_IDENT_CY
             -LINDERS*2]);
 455   1              ataDriveInfo.heads =             sectordata[ATA_IDENT_HEADS*2];
 456   1              ataDriveInfo.sectors =           sectordata[ATA_IDENT_SECTORS*2];
 457   1              ataDriveInfo.LBAsupport =        sectordata[ATA_IDENT_FIELDVALID*2];
 458   1              ataDriveInfo.sizeinsectors = (unsigned long) sectordata[123];
 459   1              ataDriveInfo.sizeinsectors = (unsigned long) ataDriveInfo.sizeinsectors *256 + sectordata[122];
 460   1              ataDriveInfo.sizeinsectors = (unsigned long) ataDriveInfo.sizeinsectors *256 + sectordata[121];
 461   1              ataDriveInfo.sizeinsectors = (unsigned long) ataDriveInfo.sizeinsectors *256 + sectordata[120];
 462   1      
 463   1      
 464   1      //      printf("ataDriveInfo.cylinders  = %d\n",ataDriveInfo.cylinders ,ataDriveInfo.cylinders   );
 465   1      //      printf("ataDriveInfo.heads = %bd\n",ataDriveInfo.heads ,ataDriveInfo.heads );
 466   1      //      printf("ataDriveInfo.sectors  = %bd\n",ataDriveInfo.sectors ,ataDriveInfo.sectors );
 467   1      //      printf("ataDriveInfo.LBAsupport  = %bd\n",ataDriveInfo.LBAsupport ,ataDriveInfo.LBAsupport);
 468   1      //      printf("ataDriveInfo.sizeinsectors  = %ld\n",ataDriveInfo.sizeinsectors ,ataDriveInfo.sizeinsectors);
 469   1      
 470   1      
 471   1              // copy model string
 472   1      
 473   1              for(i=0; i<40; i+=2)
 474   1              {
 475   2                      // correct for byte order
 476   2                      ataDriveInfo.model[i  ] = buffer[(ATA_IDENT_MODEL*2) + i + 1];
 477   2                      ataDriveInfo.model[i+1] = buffer[(ATA_IDENT_MODEL*2) + i    ];
 478   2              }
 479   1              // terminate string
 480   1              ataDriveInfo.model[40] = 0;
 481   1      
 482   1              // process and print info
 483   1              if(ataDriveInfo.LBAsupport)
 484   1              {
 485   2                      // LBA support
 486   2                      printf("Drive 0: %ldMB ",  ataDriveInfo.sizeinsectors/(1000000/512) );
 487   2                      //printf("Drive 0: %d Sectors ", ataDriveInfo.sizeinsectors/512 );
C51 COMPILER V8.02   IDE_51_MAIN_REV5                                                      05/08/2006 05:26:46 PAGE 9   

 488   2                      printf("LBA mode -- MODEL: ");
 489   2              }
 490   1              else
 491   1              {
 492   2                      // CHS, no LBA support
 493   2                      // calculate drive size
 494   2                      ataDriveInfo.sizeinsectors = (unsigned long) ataDriveInfo.cylinders*
 495   2                                                                                                      ataDriveInfo.heads*ataDriveInfo.sectors;
 496   2                      printf("Drive 0: %dMB ", ataDriveInfo.sizeinsectors/(1000000/512) );
 497   2                      printf("CHS mode C=%d H=%d S=%d -- MODEL: ", ataDriveInfo.cylinders, ataDriveInfo.heads, ataDriveInfo.se
             -ctors );
 498   2              }
 499   1              // print model information      
 500   1              rprintfStr(ataDriveInfo.model); printf("\n");
 501   1      
 502   1              //reportbuffers();
 503   1              // initialize local disk parameters
 504   1              //ataDriveInfo.cylinders = ATA_DISKPARM_CLYS;
 505   1              //ataDriveInfo.heads = ATA_DISKPARM_HEADS;
 506   1              //ataDriveInfo.sectors = ATA_DISKPARM_SECTORS;
 507   1      
 508   1      }
 509          
 510          void reportbuffers()
 511          
 512          {
 513   1              int s,t;
 514   1              unsigned char a,b;
 515   1              printf("ADDR ");
 516   1              for(t=0;t <= 15; t++ )
 517   1              {
 518   2                      printf("%02bX ",(unsigned char ) t);
 519   2              }               
 520   1              printf("\n");
 521   1              for(s=0;s <= 31; s++ )
 522   1              {
 523   2                      printf("%04X ",s*16);
 524   2                      for(t=0; t < 8; t++ )
 525   2                      {
 526   3                              printf("%02bX %02bX ",sectordata[(8*s+t)*2], sectordata[(8*s+t)*2+1]);
 527   3                      }               
 528   2                      printf("\t");
 529   2                      for(t=0;t < 8; t++ )
 530   2                      {
 531   3                          a = sectordata[(8*s+t)*2+1] ;                   
 532   3                              if((a > 'z') || (a < ' ')) a = '.';
 533   3                              b = sectordata[(8*s+t)*2];
 534   3                          if((b > 'z') || (b < ' ')) b = '.';
 535   3                              printf("%c%c", b, a);
 536   3                      }               
 537   2                      printf("\n");
 538   2                      delay(10);
 539   2              }
 540   1      }
 541          
 542          
 543          void ReadHDDBuffer(void)
 544          {
 545   1              int s;
 546   1              //unsigned char a,b;
 547   1              while( (READ_ATA_REG(ALTSTATUS_REG) & 0x80)) ;
 548   1              READ_ATA_REG(PRISTATUS_REG);
C51 COMPILER V8.02   IDE_51_MAIN_REV5                                                      05/08/2006 05:26:46 PAGE 10  

 549   1              for(s=0;s <= 256; s++ )
 550   1              {
 551   2                      while(!(READ_ATA_REG(PRISTATUS_REG)&& 0x80)) ;
 552   2                      P0 = 0xff;
 553   2                      P1 = DATA_REG;
 554   2                      RDn = 0;
 555   2                      sectordata[s*2] = P0;
 556   2                      sectordata[(s*2)+1] = P2;
 557   2                      RDn = 1;                
 558   2              }
 559   1              reportbuffers();        
 560   1      
 561   1      }
 562          
 563          
 564          void int0_isr (void) interrupt 0
 565          {
 566   1      //      sectordata[word_counter++] = AtaReadRegister( DATA_REG );
 567   1      //      sectordata[word_counter++] = P2;
 568   1      }
 569          
 570          /*===================================================================
 571             ATA support function
 572          =====================================================================*/
 573          unsigned char AtaReadRegister(unsigned char p_ucRegister)
 574          {
 575   1              unsigned char ata_reg;
 576   1              ata_reg = READ_ATA_REG((unsigned char)p_ucRegister);
 577   1              return ata_reg; 
 578   1      }
 579          
 580          void AtaWriteRegister(unsigned char p_ucRegister, unsigned char p_ucData)
 581          {
 582   1              while( (READ_ATA_REG(PRISTATUS_REG) & 0x80)) ;
 583   1              P0 = p_ucData ;
 584   1              P1 = p_ucRegister;
 585   1              WRn = 0;
 586   1              delay(50);
 587   1              WRn = 1;
 588   1      
 589   1      }
 590          void wait_ATA_ready()
 591          {
 592   1              while( (READ_ATA_REG(PRISTATUS_REG) & 0x80)) ;    // wait for not busy
 593   1              while(!(READ_ATA_REG(PRISTATUS_REG) & 0x40));     // wait for ready
 594   1      }
 595          
 596          void rep_all_reg ()
 597          {
 598   1              printf("\n");
 599   1              printf(":RSC%02bX\n", READ_ATA_REG(SECTOR_COUNT));
 600   1              printf(":RSN%02bX\n", READ_ATA_REG(SECTOR_NUMBER));
 601   1              printf(":RCL%02bX\n", READ_ATA_REG(CYLINDER_LOW));
 602   1              printf(":RCH%02bX\n", READ_ATA_REG(CYLINDER_HI));
 603   1              printf(":RSD%02bX\n", READ_ATA_REG(DRIVE_HEAD));
 604   1              printf(":RTR%02bX\n", READ_ATA_REG(PRISTATUS_REG));
 605   1              printf(":RER%02bX\n", READ_ATA_REG(ERROR_REG));
 606   1      }
 607          
 608          unsigned char READ_ATA_REG (unsigned char REG )
 609          {
 610   1              unsigned char return_val;
C51 COMPILER V8.02   IDE_51_MAIN_REV5                                                      05/08/2006 05:26:46 PAGE 11  

 611   1              P0 = 0xff;
 612   1              P1 = REG;
 613   1              RDn = 0;
 614   1              return_val = P0;
 615   1              RDn = 1;
 616   1              return return_val;
 617   1      }                  
 618          
 619          /*=======================================
 620              utility function
 621          
 622          =========================================*/
 623          
 624          /*
 625          function        : void delay(unsigned int dd)
 626          return          : none
 627          parameter       : int dd - delay counter (1 to 65535)
 628          */
 629          void delay(unsigned int dd)
 630          {
 631   1              while(dd--) ;
 632   1      }
 633          
 634          
 635          /*=======================================
 636           Serial port support function
 637          =========================================*/
 638          void Init_serial() 
 639          {
 640   1         //' SET TH1 AND PCON AT FEQUENCY. = 18.432 MHz
 641   1         PCON |= 0x80; 
 642   1         TH1 = 246;
 643   1         SCON = 0x50; 
 644   1         TMOD = 0x20; 
 645   1         TR1= 1;     //' TIMER 1 RUN.
 646   1         TI   = 0;   //' SET TI SEND FIRST CHAR OF UART.
 647   1      }
 648          
 649          /*"(---------------------------------------------------------------------)"*/
 650          /*"(-                      APPLICATIONS SEND DATA                       -)"*/
 651          /*"(---------------------------------------------------------------------)"*/
 652          char putchar(unsigned char c) 
 653          {
 654   1              SBUF = c; 
 655   1              while(!TI);
 656   1              TI = 0;      //' CLEAR BIT FLAG TI_0
 657   1              return (c);  //' MOV DATA TO SERIAL 
 658   1      }
 659          
 660          /*"(---------------------------------------------------------------------)"*/
 661          /*"(-                    APPLICATIONS RECEIVE DATA                      -)"*/
 662          /*"(---------------------------------------------------------------------)"*/
 663          void RxdReceive () interrupt 4 
 664          {
 665   1              unsigned char c;
 666   1              if (RI == 1) 
 667   1              { 
 668   2                      c = SBUF;
 669   2                      Aux_Data[Bytes_write++] = c; //   
 670   2                      Aux_Data[Bytes_write+1] = '\0'; //   
 671   2                      RI = 0;
 672   2              }
C51 COMPILER V8.02   IDE_51_MAIN_REV5                                                      05/08/2006 05:26:46 PAGE 12  

 673   1              return;
 674   1      }
 675          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2198    ----
   CONSTANT SIZE    =    605    ----
   XDATA SIZE       =    611      37
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
