C51 COMPILER V8.02   IDE_51_MAIN_REV3                                                      05/01/2006 02:57:23 PAGE 1   


C51 COMPILER V8.02, COMPILATION OF MODULE IDE_51_MAIN_REV3
OBJECT MODULE PLACED IN IDE_51_main_rev3.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE IDE_51_main_rev3.c LARGE OMF2

line level    source

   1          /* ==============================================
   2          
   3          Project : IDE-51
   4          Purpose : Interface IDE Harddisk with AT89C51AC2
   5          Date    : Revision 3 2006.04.27
   6          Author  : ktkoson@kmitl.ac.th
   7          
   8          =================================================*/
   9          
  10          #include <REG51AC2.h>
  11          #include <stdio.h>
  12          
  13          #define N 'N'
  14          #define E 'E'
  15          #define O 'O'
  16          #define n 'N'
  17          #define e 'E'
  18          #define o 'O'
  19          
  20          #define ATA_DEVICE_COUNT_MAX  2
  21          
  22          #define ATA_ST_ERR                      0x01
  23          #define ATA_ST_INDEX            0x02 >> 1 
  24          #define ATA_ST_CORR                     0x04 >> 2
  25          #define ATA_ST_DRQ                      0x08 >> 3
  26          #define ATA_ST_DSC                      0x10 >> 4
  27          #define ATA_ST_DWF                      0x20 >> 5
  28          #define ATA_ST_RDY                      0x40 >> 6
  29          #define ATA_ST_BUSY                     0x80 >> 7
  30          
  31          #define ATA_ERR_AMNF            0x01
  32          #define ATA_ERR_TK0NF           0x02 >> 1
  33          #define ATA_ERR_ABRT            0x04 >> 2
  34          #define ATA_ERR_MCR                     0x08 >> 3
  35          #define ATA_ERR_IDNF            0x10 >> 4
  36          #define ATA_ERR_MC                      0x20 >> 5
  37          #define ATA_ERR_UNC                     0x40 >> 6
  38          #define ATA_ERR_BBK                     0x80 >> 7
  39          
  40          
  41          #define DATA_REG                        0xF0
  42          #define ERROR_REG                       0xF1
  43          #define SECTOR_COUNT            0xF2
  44          #define SECTOR_NUMBER           0xF3
  45          #define CYLINDER_LOW            0xF4
  46          #define CYLINDER_HI                     0xF5
  47          #define DRIVE_HEAD                      0xF6
  48          #define PRISTATUS_REG           0xF7
  49          #define COMMAND_REG                     0xF7
  50          
  51          
  52          /*
  53          #define regATA_DATALSB          0x60    // data reg         in/out
  54          #define regATA_DATAMSB          0x43    // data reg         in/out
  55          #define regATA_DATA                     0xF0    // data reg         in/out
C51 COMPILER V8.02   IDE_51_MAIN_REV3                                                      05/01/2006 02:57:23 PAGE 2   

  56          #define regATA_ERROR            0xF1    // error            in    
  57          #define regATA_FEATURE          0xF1    // feature reg         out
  58          #define regATA_SECCNT           0xF2    // sector count     in/out
  59          #define regATA_SECNR            0xF3    // sector number    in/out
  60          #define regATA_CYLLSB           0xF4    // cylinder low     in/out
  61          #define regATA_CYLMSB           0xF5    // cylinder high    in/out
  62          #define regATA_DEVHEAD          0xF6    // device head      in/out
  63          #define regATA_PRISTAT          0xF7    // primary status   in    
  64          #define regATA_DEVCMD           0xF7    // command             out
  65          #define regATA_ALTSTAT          0xEE    // alternate status in    
  66          #define regATA_DEVCTRL          0xEE    // device control      out
  67          #define regATA_DEVADDR          0xEF    // device address   in     
  68          */
  69          // ATA error register (regATA_ERROR) bitmasks (msk)
  70          
  71          #define mskATA_ER_ICRC          0x80    // ATA Ultra DMA bad CRC
  72          #define mskATA_ER_BBK           0x80    // ATA bad block
  73          #define mskATA_ER_UNC           0x40    // ATA uncorrected error
  74          #define mskATA_ER_MC            0x20    // ATA media change
  75          #define mskATA_ER_IDNF          0x10    // ATA id not found
  76          #define mskATA_ER_MCR           0x08    // ATA media change request
  77          #define mskATA_ER_ABRT          0x04    // ATA command aborted
  78          #define mskATA_ER_NTK0          0x02    // ATA track 0 not found
  79          #define mskATA_ER_NDAM          0x01    // ATA address mark not found
  80          
  81          
  82          // ATAPI Interrupt Reason bits in the Sector Count reg (regATA_SECCNT)
  83          
  84          #define regATA_SECCNT_P_TAG     0xf8   // ATAPI tag (mask)
  85          #define regATA_SECCNT_P_REL     0x04   // ATAPI release
  86          #define regATA_SECCNT_P_IO      0x02   // ATAPI I/O
  87          #define regATA_SECCNT_P_CD      0x01   // ATAPI C/D
  88          
  89          // bits 7-4 of the device/head (regATA_DEVHEAD) reg
  90          
  91          #define regATA_DEVHEAD_DEV0      0x00 // 0xe0   // select device 0
  92          #define regATA_DEVHEAD_DEV1      0x10 //0xf0  // select device 1
  93          
  94          // status reg (regATA_PRISTAT and regATA_ALTSTAT) bits
  95          
  96          #define regATA_PRISTAT_BSY  0x80  // busy
  97          #define regATA_PRISTAT_RDY  0x40  // ready
  98          #define regATA_PRISTAT_DF   0x20  // device fault
  99          #define regATA_PRISTAT_WFT  0x20  // write fault (old name)
 100          #define regATA_PRISTAT_SKC  0x10  // seek complete
 101          #define regATA_PRISTAT_SERV 0x10  // service
 102          #define regATA_PRISTAT_DRQ  0x08  // data request
 103          #define regATA_PRISTAT_CORR 0x04  // corrected
 104          #define regATA_PRISTAT_IDX  0x02  // index
 105          #define regATA_PRISTAT_ERR  0x01  // error
 106          
 107          // digital output reg (regATA_DEVCTRL) bitmasks
 108          
 109          #define regATA_DEVCTRL_HD15   0x00      // 0x08  // bit should always be set to one
 110          #define regATA_DEVCTRL_SRST   0x04  // soft reset
 111          #define regATA_DEVCTRL_NIEN   0x02  // disable interrupts
 112          
 113          /**************************************************************/
 114          
 115          
 116          #define ATA_DEVCONFIG_NONE    0
 117          #define ATA_DEVCONFIG_UNKNOWN 1
C51 COMPILER V8.02   IDE_51_MAIN_REV3                                                      05/01/2006 02:57:23 PAGE 3   

 118          #define ATA_DEVCONFIG_ATA     2
 119          #define ATA_DEVCONFIG_ATAPI   3
 120          
 121          
 122          // Most mandatory and optional ATA commands (from ATA-3),
 123          
 124          #define cmdATA_CFA_ERASE_SECTORS            0xC0
 125          #define cmdATA_CFA_REQUEST_EXT_ERR_CODE     0x03
 126          #define cmdATA_CFA_TRANSLATE_SECTOR         0x87
 127          #define cmdATA_CFA_WRITE_MULTIPLE_WO_ERASE  0xCD
 128          #define cmdATA_CFA_WRITE_SECTORS_WO_ERASE   0x38
 129          #define cmdATA_CHECK_POWER_MODE1            0xE5
 130          #define cmdATA_CHECK_POWER_MODE2            0x98
 131          #define cmdATA_DEVICE_RESET                 0x08
 132          #define cmdATA_EXECUTE_DEVICE_DIAGNOSTIC    0x90
 133          #define cmdATA_FLUSH_CACHE                  0xE7
 134          #define cmdATA_FORMAT_TRACK                 0x50
 135          #define cmdATA_ATANTIFY_DEVICE              0xEC
 136          #define cmdATA_ATANTIFY_DEVICE_PACKET       0xA1
 137          #define cmdATA_ATANTIFY_PACKET_DEVICE       0xA1
 138          #define cmdATA_IDLE1                        0xE3
 139          #define cmdATA_IDLE2                        0x97
 140          #define cmdATA_IDLE_IMMEDIATE1              0xE1
 141          #define cmdATA_IDLE_IMMEDIATE2              0x95
 142          #define cmdATA_INITIALIZE_DRIVE_PARAMETERS  0x91
 143          #define cmdATA_INITIALIZE_DEVICE_PARAMETERS 0x91
 144          #define cmdATA_NOP                          0x00
 145          #define cmdATA_PACKET                       0xA0
 146          #define cmdATA_READ_BUFFER                  0xE4
 147          #define cmdATA_READ_DMA                     0xC8
 148          #define cmdATA_READ_DMA_QUEUED              0xC7
 149          #define cmdATA_READ_MULTIPLE                0xC4
 150          #define cmdATA_READ_SECTORS                 0x20
 151          #define cmdATA_READ_VERIFY_SECTORS          0x40
 152          #define cmdATA_RECALIBRATE                  0x10
 153          #define cmdATA_SEEK                         0x70
 154          #define cmdATA_SET_FEATURES                 0xEF
 155          #define cmdATA_SET_MULTIPLE_MODE            0xC6
 156          #define cmdATA_SLEEP1                       0xE6
 157          #define cmdATA_SLEEP2                       0x99
 158          #define cmdATA_STANDBY1                     0xE2
 159          #define cmdATA_STANDBY2                     0x96
 160          #define cmdATA_STANDBY_IMMEDIATE1           0xE0
 161          #define cmdATA_STANDBY_IMMEDIATE2           0x94
 162          #define cmdATA_WRITE_BUFFER                 0xE8
 163          #define cmdATA_WRITE_DMA                    0xCA
 164          #define cmdATA_WRITE_DMA_QUEUED             0xCC
 165          #define cmdATA_WRITE_MULTIPLE               0xC5
 166          #define cmdATA_WRITE_SECTORS                0x30
 167          #define cmdATA_WRITE_VERIFY                 0x3C
 168          
 169          
 170          
 171          unsigned int  DataSpeed;
 172          unsigned char DataBits;
 173          unsigned char Parity;
 174          unsigned char StopBits;
 175          unsigned char SerialSet;
 176          
 177          unsigned char g_AtaDevConfig[ATA_DEVICE_COUNT_MAX];
 178          
 179          
C51 COMPILER V8.02   IDE_51_MAIN_REV3                                                      05/01/2006 02:57:23 PAGE 4   

 180          void Init_serial();
 181          unsigned char Bytes_write; // len data_ethernet
 182          unsigned char Aux_Data[32];           //' TCP AUX DATA = INTERGER < PACKET - 55 BYTE AND CHECKRAM
 183          unsigned char sectordata[512];
 184          
 185          
 186          sbit RESETn = P1^7;
 187          sbit RDn    = P1^6;
 188          sbit WRn    = P1^5;
 189          sbit CS1n   = P1^4;
 190          sbit CS0n   = P1^3;
 191          sbit A2     = P1^2;
 192          sbit A1     = P1^1;
 193          sbit A0     = P1^0;
 194          sbit tstbit = P4^0;
 195          
 196          void delay(unsigned int);
 197          unsigned char READ_ATA_REG (unsigned char REG );
 198          unsigned char READ_ATA_REG_HI (unsigned char REG );
 199          void WRITE_ATA_REG(unsigned char breg, unsigned char value);
 200          void ReportDiskStatus();
 201          void rep_all_reg ();
 202          void ReportErrorStatus();
 203          void wait_ATA_ready();
 204          //int AtaQueryDevice(void);
 205          int AtaResetAdapter(void);
 206          unsigned char AtaReadRegister(unsigned char p_ucRegister);
 207          void AtaWriteRegister(unsigned char p_ucRegister, unsigned char p_ucData);
 208          char AtaSelectDevice(unsigned char p_ucDevice);
 209          unsigned char word_counter = 0;
 210          
 211          // todo : 49.05.01@02.34 add read data byte & words from HDD
 212          
 213          
 214          
 215          main()
 216          {
 217   1              unsigned int i = 0;
 218   1              
 219   1              AUXR = 0x0C;    //' T89C51AC2 CONFIG SELECT IRAM = 1024 BYTE.
 220   1              Init_serial();  //' SERIAL SETTING.
 221   1              //IT0 = 1;              //' Falling edge interrupt 0
 222   1              //EX0 = 1;              //' Enable INT0 interrupt
 223   1              EA = 1;         //' ENABLE INTERRUPT.
 224   1          ES = 1;         //' ENABLE SERIAL INTERRUPT.
 225   1      
 226   1              P1 = 0xf8;
 227   1              P2 = 0;
 228   1      
 229   1              Bytes_write = 0;
 230   1              printf(":RZ00\n"); // send hw reset to PC
 231   1              printf("=======================\n\r");
 232   1              printf("8051-IDE system...\n\r");
 233   1              printf("Version 1.0 \n\r");
 234   1              printf("14 April 2006 @19:30\n\r");
 235   1              printf("ktkoson@kmitl.ac.th\n\r");
 236   1              printf("all right reserved.\n\r");
 237   1              printf("=======================\n\r");
 238   1              printf("\n\r");
 239   1      
 240   1      
 241   1              printf("Hard disk diag...\n\r");
C51 COMPILER V8.02   IDE_51_MAIN_REV3                                                      05/01/2006 02:57:23 PAGE 5   

 242   1              printf("\n\r");
 243   1      
 244   1              RESETn = 0;
 245   1              delay(100);
 246   1              RESETn = 1;
 247   1              delay(100);
 248   1      
 249   1      
 250   1                      
 251   1              wait_ATA_ready(); 
 252   1              printf("Harddisk ready...\r\n");
 253   1      
 254   1              rep_all_reg ();
 255   1              
 256   1              //printf("AtaQueryDevice() = %d... \r\n ",  AtaQueryDevice());
 257   1      
 258   1       
 259   1         // AtaWriteRegister(regATA_DEVCMD, cmdATA_STANDBY_IMMEDIATE1 );
 260   1      
 261   1              //rep_all_reg ();        
 262   1              //AtaSelectDevice(0);
 263   1              /*
 264   1      
 265   1      
 266   1         printf("WRITE_ATA_REG(COMMAND_REG, 0xE1);...\r\n");
 267   1      
 268   1         WRITE_ATA_REG(COMMAND_REG, 0xE1);
 269   1         wait_ATA_ready();    
 270   1         
 271   1         rep_all_reg ();
 272   1      */
 273   1         //WRITE_ATA_REG(COMMAND_REG, 0xEC);
 274   1      
 275   1         wait_ATA_ready();    
 276   1         printf("hello\n");
 277   1      
 278   1          while(1){
 279   2                      if(Bytes_write)
 280   2                      {
 281   3                              //printf("Bytes_write %bd auxdata = [%s]\n\r", Bytes_write,Aux_Data);
 282   3                              if(Aux_Data[0] != ':')
 283   3                              {
 284   4                                      printf(":err\n");
 285   4                                      Bytes_write = 0;
 286   4                                      Aux_Data[0] = 0;
 287   4                                      Aux_Data[1] = 0;
 288   4                                      continue;
 289   4                              } 
 290   3                              if(Aux_Data[Bytes_write-1] == ':')
 291   3                              { 
 292   4                                      // printf("Start of code\n");
 293   4                                      continue;
 294   4                              }
 295   3                              if(Aux_Data[Bytes_write-1] == 0x0d) 
 296   3                              {
 297   4                                      //printf("Received %s\n",Aux_Data);
 298   4                                      Bytes_write=0;
 299   4                                      switch(Aux_Data[1])
 300   4                                      {
 301   5                                              case  'w' :
 302   5                                              switch (Aux_Data[2])
 303   5                                              {
C51 COMPILER V8.02   IDE_51_MAIN_REV3                                                      05/01/2006 02:57:23 PAGE 6   

 304   6                                                      case 'b': 
 305   6                                                              printf("Write Buffer\n");
 306   6                                                              break;
 307   6                                                      case 'r':
 308   6                                                              printf("Write Register\n");
 309   6                                                              break;   
 310   6                                                      case 's':
 311   6                                                              printf("Write Sector\n");
 312   6                                                              break;   
 313   6                                                      case 'c':
 314   6                                                              AtaWriteRegister(COMMAND_REG, (unsigned char)Aux_Data[3]);
 315   6                                                              printf("Write Command %bX\n",(unsigned char)Aux_Data[3]);
 316   6                                                              break;   
 317   6      
 318   6                                                      default:
 319   6                                                              printf("Command not implemented @w[2]\n");
 320   6                                                      break;
 321   6                                              }
 322   5                                              break;
 323   5      
 324   5                                              case 'r':
 325   5                                              switch(Aux_Data[2])
 326   5                                              {
 327   6                                                      case 'b': 
 328   6                                                              printf("Read Buffer\n");
 329   6                                                              break;                          
 330   6                                                      case 'r' :
 331   6                                                              rep_all_reg ();
 332   6                                                              break;                          
 333   6                                                      case 's' :
 334   6                                                              printf("Read Sector\n");
 335   6                                                              break;  
 336   6                                                      case 'e' :
 337   6                                                              printf(":RER%bX\n", AtaReadRegister(ERROR_REG));
 338   6                                                              break;  
 339   6                                                      case 't' :
 340   6                                                              printf(":RTR%bX\n", AtaReadRegister(PRISTATUS_REG));
 341   6                                                              break;  
 342   6                                                                                      
 343   6                                                      default:
 344   6                                                              printf("Command not implemented @r[2]\n");
 345   6                                                      break;
 346   6                                              } 
 347   5                                              break;
 348   5                                              default:
 349   5                                              printf("Command not implemented @[1]\n");
 350   5                                              break;
 351   5                                      }
 352   4                              }
 353   3                      }       
 354   2              }
 355   1      }
 356          
 357          
 358          
 359          void int0_isr (void) interrupt 0
 360          {
 361   1              sectordata[word_counter++] = AtaReadRegister( DATA_REG );
 362   1              sectordata[word_counter++] = P2;
 363   1      }
 364          
 365          /*===================================================================
C51 COMPILER V8.02   IDE_51_MAIN_REV3                                                      05/01/2006 02:57:23 PAGE 7   

 366             ATA support function
 367          =====================================================================*/
 368          unsigned char AtaReadRegister(unsigned char p_ucRegister)
 369          {
 370   1              unsigned char ata_reg;
 371   1              ata_reg = READ_ATA_REG((unsigned char)p_ucRegister);
 372   1              return ata_reg; 
 373   1      }
 374          
 375          void AtaWriteRegister(unsigned char p_ucRegister, unsigned char p_ucData)
 376          {
 377   1              //WRITE_ATA_REG((unsigned char)p_ucRegister, p_ucData);
 378   1      
 379   1              while( (READ_ATA_REG(PRISTATUS_REG) & 0x80)) ;
 380   1              P0 = p_ucData ;
 381   1              P1 = p_ucRegister ;
 382   1              WRn = 0;
 383   1              delay(50);
 384   1              WRn = 1;
 385   1      
 386   1      }
 387          void wait_ATA_ready()
 388          {
 389   1              while( (READ_ATA_REG(PRISTATUS_REG) & 0x80)) ;    // wait for not busy
 390   1              while(!(READ_ATA_REG(PRISTATUS_REG) & 0x40));     // wait for ready
 391   1      }
 392          
 393          void rep_all_reg ()
 394          {
 395   1              printf("\n");
 396   1              printf(":RSC%c\n", READ_ATA_REG(SECTOR_COUNT));
 397   1              printf(":RSN%c\n", READ_ATA_REG(SECTOR_NUMBER));
 398   1              printf(":RCL%c\n", READ_ATA_REG(CYLINDER_LOW));
 399   1              printf(":RCH%c\n", READ_ATA_REG(CYLINDER_HI));
 400   1              printf(":RSD%c\n", READ_ATA_REG(DRIVE_HEAD));
 401   1              printf(":RTR%c\n", READ_ATA_REG(PRISTATUS_REG));
 402   1              printf(":RER%c\n", READ_ATA_REG(ERROR_REG));
 403   1      }
 404          
 405          unsigned char READ_ATA_REG (unsigned char REG )
 406          {
 407   1              unsigned char return_val;
 408   1              P1 = REG;
 409   1              RDn = 0;
 410   1              return_val = P0;
 411   1              RDn = 1;
 412   1              return return_val;
 413   1      }                  
 414          /*
 415          void WRITE_ATA_REG(unsigned char breg, unsigned char value)
 416          {
 417                  while( (READ_ATA_REG(STATUS_REG) & 0x80)) ;
 418                  P0 = value;
 419                  delay(50);
 420                  P1 = breg;
 421                  delay(50);
 422                  WRn = 0;
 423                  delay(50);
 424                  WRn = 1;
 425          }
 426          */
 427          /*=======================================
C51 COMPILER V8.02   IDE_51_MAIN_REV3                                                      05/01/2006 02:57:23 PAGE 8   

 428              utility function
 429          
 430          =========================================*/
 431          
 432          /*
 433          function        : void delay(unsigned int dd)
 434          return          : none
 435          parameter       : int dd - delay counter (1 to 65535)
 436          */
 437          void delay(unsigned int dd)
 438          {
 439   1              while(dd--) ;
 440   1      }
 441          
 442          
 443          /*=======================================
 444           Serial port support function
 445          =========================================*/
 446          void Init_serial() 
 447          {
 448   1         //' SET TH1 AND PCON AT FEQUENCY. = 18.432 MHz
 449   1         PCON |= 0x80; 
 450   1         TH1 = 246;
 451   1         SCON = 0x50; 
 452   1         TMOD = 0x20; 
 453   1         TR1= 1;     //' TIMER 1 RUN.
 454   1         TI   = 0;   //' SET TI SEND FIRST CHAR OF UART.
 455   1      }
 456          
 457          /*"(---------------------------------------------------------------------)"*/
 458          /*"(-                      APPLICATIONS SEND DATA                       -)"*/
 459          /*"(---------------------------------------------------------------------)"*/
 460          char putchar(unsigned char c) 
 461          {
 462   1              SBUF = c; 
 463   1              while(!TI);
 464   1              TI = 0;      //' CLEAR BIT FLAG TI_0
 465   1              return (c);  //' MOV DATA TO SERIAL 
 466   1      }
 467          
 468          /*"(---------------------------------------------------------------------)"*/
 469          /*"(-                    APPLICATIONS RECEIVE DATA                      -)"*/
 470          /*"(---------------------------------------------------------------------)"*/
 471          void RxdReceive () interrupt 4 
 472          {
 473   1              unsigned char c;
 474   1              if (RI == 1) 
 475   1              { 
 476   2                      c = SBUF;
 477   2                      Aux_Data[Bytes_write++] = c; //   
 478   2                      Aux_Data[Bytes_write+1] = '\0'; //   
 479   2                      RI = 0;
 480   2              }
 481   1              return;
 482   1      }
 483          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    859    ----
   CONSTANT SIZE    =    449    ----
   XDATA SIZE       =    554       4
C51 COMPILER V8.02   IDE_51_MAIN_REV3                                                      05/01/2006 02:57:23 PAGE 9   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
